#pragma kernel CSMain

struct VertexData
{
    uint id;
    float4 pos;
    float3 nor;
    float2 uv;
    float4 col;

    float4 opos;
    float3 velocity;
};

RWStructuredBuffer<VertexData> vertexBuffer;
float _Time;
uint _VertexCount;

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //Real id
    uint rid = vertexBuffer[id.x].id;
    
    //Prev / next id
    uint rid_prev = rid - 1; if(rid_prev < 0) rid_prev = _VertexCount-1;
    uint rid_next = rid + 1; if(rid_prev >= _VertexCount) rid_next = 0;
    
    //Positions for knowing which is the first vertex
    float4 pos0 = vertexBuffer[0].pos;
    float4 pos = vertexBuffer[rid].pos;
    float dist = distance(pos,pos0);
    
    //color animation
    if(rid == 0 || dist < 0.01f)
    {
        //Rainbow color for the first vertex
        float3 c;
        c.r = frac(sin(_Time + vertexBuffer[rid].velocity.x));
        c.g = frac(sin(_Time + vertexBuffer[rid].velocity.y));
        c.b = frac(sin(_Time + vertexBuffer[rid].velocity.z));
        
        vertexBuffer[rid].col = float4(c,1);
    }
    else
    {
        vertexBuffer[rid].col = vertexBuffer[rid_prev].col;
    }

    //Vertex animation
    vertexBuffer[rid].pos.xz = vertexBuffer[rid].opos.xz * (1 + sin(_Time + vertexBuffer[rid].opos.y * 3.0f) * 0.3f);
}